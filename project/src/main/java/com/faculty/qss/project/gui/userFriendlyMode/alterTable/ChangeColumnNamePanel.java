/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.faculty.qss.project.gui.userFriendlyMode.alterTable;

import com.faculty.qss.project.comands.Implementation.DatabaseImpl;
import com.faculty.qss.project.comands.Implementation.TableImpl;
import com.faculty.qss.project.comands.Interfaces.Database;
import com.faculty.qss.project.comands.Interfaces.Table;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextField;

/**
 *
 * @author ecami
 */
public class ChangeColumnNamePanel extends javax.swing.JPanel {

    /**
     * Creates new form ChangeColumnNamePanel
     */
    public ChangeColumnNamePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSelectDatabaseName = new javax.swing.JLabel();
        comboBoxDatabaseNames = new javax.swing.JComboBox<>();
        labelSelectTableName1 = new javax.swing.JLabel();
        comboBoxTableNames = new javax.swing.JComboBox<>();
        scrollPaneTypeCurrentNewColumnName = new javax.swing.JScrollPane();
        panelTypeCurrentNewColumnName = new javax.swing.JPanel();
        labelColumnType = new javax.swing.JLabel();
        labelCurrentColumnName = new javax.swing.JLabel();
        labelNewColumnName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        buttonClearData3 = new javax.swing.JButton();
        buttonExecuteCommand = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(462, 293));
        setSize(new java.awt.Dimension(462, 293));

        labelSelectDatabaseName.setText("<html>Select the database</html>");

        comboBoxDatabaseNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxDatabaseNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangeActionPerformedForDatabase(evt);
            }
        });

        labelSelectTableName1.setText("<html>Select the table</html>");

        comboBoxTableNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        comboBoxTableNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangedActionPerformedForTable(evt);
            }
        });

        scrollPaneTypeCurrentNewColumnName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPaneTypeCurrentNewColumnName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPaneTypeCurrentNewColumnName.setHorizontalScrollBar(null);

        labelColumnType.setText("Column type");

        labelCurrentColumnName.setText("Current column name");

        labelNewColumnName.setText("New column name");

        javax.swing.GroupLayout panelTypeCurrentNewColumnNameLayout = new javax.swing.GroupLayout(panelTypeCurrentNewColumnName);
        panelTypeCurrentNewColumnName.setLayout(panelTypeCurrentNewColumnNameLayout);
        panelTypeCurrentNewColumnNameLayout.setHorizontalGroup(
            panelTypeCurrentNewColumnNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTypeCurrentNewColumnNameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTypeCurrentNewColumnNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelNewColumnName)
                    .addGroup(panelTypeCurrentNewColumnNameLayout.createSequentialGroup()
                        .addComponent(labelColumnType)
                        .addGap(18, 18, 18)
                        .addComponent(labelCurrentColumnName)
                        .addGap(148, 148, 148)))
                .addGap(2, 2, 2))
        );
        panelTypeCurrentNewColumnNameLayout.setVerticalGroup(
            panelTypeCurrentNewColumnNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTypeCurrentNewColumnNameLayout.createSequentialGroup()
                .addGroup(panelTypeCurrentNewColumnNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelColumnType)
                    .addComponent(labelCurrentColumnName)
                    .addComponent(labelNewColumnName))
                .addGap(2, 2, 2))
        );

        scrollPaneTypeCurrentNewColumnName.setViewportView(panelTypeCurrentNewColumnName);

        textAreaOutput.setColumns(20);
        textAreaOutput.setRows(5);
        jScrollPane1.setViewportView(textAreaOutput);

        buttonClearData3.setForeground(new java.awt.Color(153, 153, 0));
        buttonClearData3.setText("Clear");
        buttonClearData3.setMaximumSize(new java.awt.Dimension(68, 27));
        buttonClearData3.setMinimumSize(new java.awt.Dimension(68, 27));
        buttonClearData3.setPreferredSize(new java.awt.Dimension(68, 27));
        buttonClearData3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearData3ActionPerformed(evt);
            }
        });

        buttonExecuteCommand.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        buttonExecuteCommand.setForeground(new java.awt.Color(0, 102, 0));
        buttonExecuteCommand.setText("Execute");
        buttonExecuteCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecuteCommandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSelectTableName1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxTableNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxDatabaseNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
            .addComponent(scrollPaneTypeCurrentNewColumnName, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonClearData3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonExecuteCommand))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDatabaseNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSelectTableName1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxTableNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPaneTypeCurrentNewColumnName, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonExecuteCommand)
                    .addComponent(buttonClearData3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClearData3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearData3ActionPerformed
        comboBoxDatabaseNames.setSelectedIndex(0);
        comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
        textAreaOutput.setText("");
    }//GEN-LAST:event_buttonClearData3ActionPerformed

    private void buttonExecuteCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecuteCommandActionPerformed
        String dbName = comboBoxDatabaseNames.getSelectedItem().toString().trim();
        
        if(dbName.equals("Choose database...")){
            textAreaOutput.setText("Choose a database from list");
        }else{
//            String tableName = comboBoxTableNames.getSelectedItem().toString().trim();
//            if (tableName.equals("Choose table...")){
//                textAreaOutput.setText("\nChoose a table from list");
//            }else{
//                List<JTextField> columnTextFields = new ArrayList<JTextField>();
//                List<JComboBox> columnsComboBoxes = new ArrayList<JComboBox>();
//
//                Component[] panelColumnComponents = panelColumns.getComponents();
//                for (int i = 0; i < panelColumnComponents.length; i++) {
//                    if (panelColumnComponents[i] instanceof JTextField) {
//                        columnTextFields.add((JTextField) panelColumnComponents[i]);
//                    } else if (panelColumnComponents[i] instanceof JComboBox) {
//                        columnsComboBoxes.add((JComboBox) panelColumnComponents[i]);
//                    }
//                }
//                HashMap<String, String> columnsNamesAndTypes = new HashMap<String, String>();
//                int completedColumnsNumber = 0;
//                for (int i = 0; i < columnTextFields.size(); i++) {
//                    String columnName = columnTextFields.get(i).getText().trim();
//                    String columnType = ((String) columnsComboBoxes.get(i).getSelectedItem()).trim();
//                    if (columnName.length() != 0) {
//                        completedColumnsNumber++;
//                        columnsNamesAndTypes.put(columnName, columnType);
//                    }
//                }
//
//                if (completedColumnsNumber == 0) {
//                    textAreaOutput.setText("You need to have at least a column to add");
//                } else {
//                    Table table = new TableImpl();
//                    String result = table.addNewColumns(dbName, tableName, columnsNamesAndTypes);
//                    textAreaOutput.setText(result);
//                }
//                }
          }
        
    }//GEN-LAST:event_buttonExecuteCommandActionPerformed

    private void itemStateChangeActionPerformedForDatabase(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangeActionPerformedForDatabase
        String dbName = (String) comboBoxDatabaseNames.getSelectedItem();
        if (!dbName.equals("Choose database...")) {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(getAllTableNamesForDb(dbName)));
        } else {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
        }
    }//GEN-LAST:event_itemStateChangeActionPerformedForDatabase

    private void itemStateChangedActionPerformedForTable(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangedActionPerformedForTable
        // TODO add your handling code here:
    }//GEN-LAST:event_itemStateChangedActionPerformedForTable


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClearData3;
    private javax.swing.JButton buttonExecuteCommand;
    private javax.swing.JComboBox<String> comboBoxDatabaseNames;
    private javax.swing.JComboBox<String> comboBoxTableNames;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelColumnType;
    private javax.swing.JLabel labelCurrentColumnName;
    private javax.swing.JLabel labelNewColumnName;
    private javax.swing.JLabel labelSelectDatabaseName;
    private javax.swing.JLabel labelSelectTableName1;
    private javax.swing.JPanel panelTypeCurrentNewColumnName;
    private javax.swing.JScrollPane scrollPaneTypeCurrentNewColumnName;
    private javax.swing.JTextArea textAreaOutput;
    // End of variables declaration//GEN-END:variables
    
    private String[] getAllDatabaseNames() {
		Database database = new DatabaseImpl();
		List<String> dbNames;
		try {
			dbNames = database.getAllDabaseNames();
			for (int i = 0; i < dbNames.size(); i++) {
				if (dbNames.get(i).equals(".DS_Store")) {
					dbNames.remove(i);
				}
			}
			dbNames.add(0, "Choose database...");
		} catch (Exception e) {
			dbNames = new ArrayList<String>();
			dbNames.add(0, "Choose database...");
		}
		String[] temp = dbNames.toArray(new String[dbNames.size()]);
		return temp;
	}

	public String[] getAllTableNamesForDb(String dbName) {
		Database database = new DatabaseImpl();
		List<String> tableNames = new ArrayList<String>();
		try {
			tableNames = database.getAllTableNamesForDb(dbName);
			for (int i = 0; i < tableNames.size(); i++) {
				if (tableNames.get(i).equals(".DS_Store")) {
					tableNames.remove(i);
				}
			}
			tableNames.add(0, "Choose table...");
		} catch (Exception ex) {
			tableNames = new ArrayList<String>();
			tableNames.add(0, "Choose table...");
		}
		String[] temp = tableNames.toArray(new String[tableNames.size()]);
		return temp;
	}

    private String[] getTableSchemaForDbAndTable(String dbName, String tableName) {
        Table table = new TableImpl();
        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
        List<String> tempCols = new ArrayList<String>();
        for (String column : columnNames) {
            tempCols.add(column.split("=")[0].trim());
        }
        tempCols.add(0, "Choose...");
        String[] temp = tempCols.toArray(new String[tempCols.size()]);
        return temp;
    }

    private String[] getTableSchemaForDbAndTableWithoutChoose(String dbName, String tableName) {
        Table table = new TableImpl();
        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
        List<String> tempCols = new ArrayList<String>();
        for (String column : columnNames) {
            tempCols.add(column.split("=")[0].trim());
        }
        String[] temp = tempCols.toArray(new String[tempCols.size()]);
        return temp;
    }
    
    private String[] getTableSchemaForDbAndTableWithoutChooseWithTypes(String dbName, String tableName) {
        Table table = new TableImpl();
        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
        List<String> tempCols = new ArrayList<String>();
        for (String column : columnNames) {
            tempCols.add(column);
        }
        String[] temp = tempCols.toArray(new String[tempCols.size()]);
        return temp;
    }

}
