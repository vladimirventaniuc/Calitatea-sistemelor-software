/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.faculty.qss.project.gui.userFriendlyMode;

import com.faculty.qss.project.comands.Implementation.DatabaseImpl;
import com.faculty.qss.project.comands.Implementation.TableImpl;
import com.faculty.qss.project.comands.Interfaces.Database;
import com.faculty.qss.project.comands.Interfaces.Table;
import java.awt.Component;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author echilaboc
 */
public class UpdateRecordPanel extends javax.swing.JPanel {

    /**
     * Creates new form SelectRecordPanel
     */
    public UpdateRecordPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSelectTableName1 = new javax.swing.JLabel();
        labelSelectDatabaseName = new javax.swing.JLabel();
        comboBoxDatabaseNames = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        labelObservation = new javax.swing.JLabel();
        buttonClearData = new javax.swing.JButton();
        buttonExecuteCommand = new javax.swing.JButton();
        labelOperator = new javax.swing.JLabel();
        labelLogicalOperator = new javax.swing.JLabel();
        textFieldValue1 = new javax.swing.JTextField();
        labelConditionWhere2 = new javax.swing.JLabel();
        labelConditionWhere1 = new javax.swing.JLabel();
        comboBoxColumn2 = new javax.swing.JComboBox<>();
        comboBoxOperator2 = new javax.swing.JComboBox<>();
        labelValue = new javax.swing.JLabel();
        textFieldValue2 = new javax.swing.JTextField();
        comboBoxColumn1 = new javax.swing.JComboBox<>();
        labelColumn = new javax.swing.JLabel();
        comboBoxOperator1 = new javax.swing.JComboBox<>();
        comboBoxLogicalOperator = new javax.swing.JComboBox<>();
        scrollPanelColumnsUpdated = new javax.swing.JScrollPane();
        panelColumnsUpdated = new javax.swing.JPanel();
        comboBoxTableNames = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(469, 369));
        setSize(new java.awt.Dimension(469, 369));

        labelSelectTableName1.setText("<html>Select the table</html>");

        labelSelectDatabaseName.setText("<html>Select the <br>database</html>");

        comboBoxDatabaseNames.setModel(new javax.swing.DefaultComboBoxModel<>(getAllDatabaseNames()));
        comboBoxDatabaseNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangeActionPerformedForDatabase(evt);
            }
        });
        comboBoxDatabaseNames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customActionMouseClicked(evt);
            }
        });

        textAreaOutput.setColumns(20);
        textAreaOutput.setRows(5);
        jScrollPane2.setViewportView(textAreaOutput);

        labelObservation.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        labelObservation.setText("* For no conditions leave free");

        buttonClearData.setForeground(new java.awt.Color(153, 153, 0));
        buttonClearData.setText("Clear");
        buttonClearData.setMaximumSize(new java.awt.Dimension(68, 27));
        buttonClearData.setMinimumSize(new java.awt.Dimension(68, 27));
        buttonClearData.setPreferredSize(new java.awt.Dimension(68, 27));
        buttonClearData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearDataActionPerformed(evt);
            }
        });

        buttonExecuteCommand.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        buttonExecuteCommand.setForeground(new java.awt.Color(0, 102, 0));
        buttonExecuteCommand.setText("Execute");
        buttonExecuteCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecuteCommandActionPerformed(evt);
            }
        });

        labelOperator.setText("Operator");

        labelLogicalOperator.setText("Logical operator:");

        labelConditionWhere2.setText("Condition 2:");

        labelConditionWhere1.setText("Condition 1:");

        comboBoxColumn2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ""}));

        comboBoxOperator2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "!="}));

        labelValue.setText("Value");

        comboBoxColumn1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));

        labelColumn.setText("Column");

        comboBoxOperator1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "!=" }));

        comboBoxLogicalOperator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "and", "or" }));

        javax.swing.GroupLayout panelColumnsUpdatedLayout = new javax.swing.GroupLayout(panelColumnsUpdated);
        panelColumnsUpdated.setLayout(panelColumnsUpdatedLayout);
        panelColumnsUpdatedLayout.setHorizontalGroup(
            panelColumnsUpdatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelColumnsUpdatedLayout.setVerticalGroup(
            panelColumnsUpdatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        scrollPanelColumnsUpdated.setViewportView(panelColumnsUpdated);

        comboBoxTableNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        comboBoxTableNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangedActionPerformedForTable(evt);
            }
        });
        comboBoxTableNames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customActionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxDatabaseNames, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelOperator)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelSelectTableName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboBoxTableNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(109, 109, 109)
                                                .addComponent(labelColumn)
                                                .addGap(198, 198, 198)
                                                .addComponent(labelValue))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(labelConditionWhere2)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(comboBoxColumn2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(labelConditionWhere1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(comboBoxColumn1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(labelLogicalOperator, javax.swing.GroupLayout.Alignment.TRAILING)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(232, 232, 232)
                                        .addComponent(comboBoxLogicalOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(labelObservation))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(buttonClearData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonExecuteCommand))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(comboBoxOperator1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboBoxOperator2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textFieldValue2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textFieldValue1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(1, 1, 1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scrollPanelColumnsUpdated, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDatabaseNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSelectTableName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxTableNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelColumn)
                    .addComponent(labelOperator)
                    .addComponent(labelValue))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelConditionWhere1)
                    .addComponent(comboBoxColumn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxOperator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldValue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxLogicalOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelLogicalOperator))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelConditionWhere2)
                    .addComponent(comboBoxColumn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxOperator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldValue2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(scrollPanelColumnsUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelObservation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonClearData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonExecuteCommand))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClearDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearDataActionPerformed
        comboBoxDatabaseNames.setSelectedIndex(0);
        comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
        comboBoxColumn1.setModel(new DefaultComboBoxModel<>(new String[]{}));
        comboBoxColumn2.setModel(new DefaultComboBoxModel<>(new String[]{}));
        textFieldValue1.setText("");
        textFieldValue2.setText("");
        textAreaOutput.setText("");

        panelColumnsUpdated.removeAll();
        panelColumnsUpdated.setLayout(new GridLayout(0, 2, 10, 10));
        panelColumnsUpdated.revalidate();
        panelColumnsUpdated.repaint();
        scrollPanelColumnsUpdated.setViewportView(panelColumnsUpdated);

        columnNames = null;
        columnNames = new ArrayList<String>();
    }//GEN-LAST:event_buttonClearDataActionPerformed

    private void buttonExecuteCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecuteCommandActionPerformed
        String dbName = comboBoxDatabaseNames.getSelectedItem().toString().trim();
        String tableName;
        try {
            tableName = comboBoxTableNames.getSelectedItem().toString().trim();
        } catch (Exception e) {
            tableName = "";
        }

        if (dbName.contains("Choose database...")) {
            textAreaOutput.setText("You have to select a database name from list");
        } else if (tableName.contains("Choose table...")) {
            textAreaOutput.setText("You have to select a table name from list");
        } else {
            String conditionColumn1 = (String) comboBoxColumn1.getSelectedItem();
            String conditionColumn2 = (String) comboBoxColumn2.getSelectedItem();
            String conditionValue1 = textFieldValue1.getText().trim();
            String conditionValue2 = textFieldValue2.getText().trim();

            String whereCondition1 = "";
            String whereCondition2 = "";
            String bigWhereCondition = "";

            boolean isCondition1Selected = false;
            boolean isCondition2Selected = false;

            if (conditionColumn1.equals("Choose..") && conditionValue1.length() == 0 && conditionColumn2.equals("Choose..") && conditionValue2.length() == 0) {
            } else {
                if (!((conditionColumn1.equals("Choose..") && conditionValue1.length() != 0) || (!conditionColumn1.equals("Choose..") && conditionValue1.length() == 0))) {
                    isCondition1Selected = true;
                    whereCondition1 += conditionColumn1 + comboBoxOperator1.getSelectedItem() + conditionValue1;
                } else {
                    textAreaOutput.setText("Both value and column name from first conditions has to be completed");
                }
                if (!((conditionColumn2.equals("Choose..") && conditionValue2.length() != 0) || (!conditionColumn2.equals("Choose..") && conditionValue2.length() == 0))) {
                    isCondition2Selected = true;
                    whereCondition2 += conditionColumn2 + comboBoxOperator2.getSelectedItem() + conditionValue2;
                } else {
                    textAreaOutput.append("\nBoth value and column name from second conditions has to be completed");
                }

                if (isCondition1Selected && isCondition2Selected && !whereCondition1.contains("Choose..") && !whereCondition2.contains("Choose..")) {
                    bigWhereCondition = whereCondition1 + " " + comboBoxLogicalOperator + " " + whereCondition2;
                } else if (isCondition1Selected && !whereCondition1.contains("Choose..")) {
                    bigWhereCondition = whereCondition1;
                } else if (isCondition2Selected && !whereCondition2.contains("Choose..")) {
                    bigWhereCondition = whereCondition2;
                }
                HashMap<String, String> columnsUpdated = new HashMap<String, String>();
                Component components[] = panelColumnsUpdated.getComponents();

                String[] tblSchema = getTableSchemaForDbAndTableWithoutChoose(dbName, tableName);
                System.out.println("|" + tblSchema.length + "|" + components.length); 
                int index = 0;
                for (int i = 0; i < components.length; i++) {
                    if (components[i] instanceof JTextField) {
                        JTextField textField = (JTextField) components[i];
                        String valueUpdated = textField.getText();
                        if (valueUpdated.length() != 0) {
                            columnsUpdated.put(tblSchema[index], valueUpdated);
                        }
                        index++;
                    }
                }

                if (columnsUpdated.size() == 0) {
                    textAreaOutput.setText("You have to update at least a column");
                } else {
                    Table table = new TableImpl();
                    String result = table.updateRecords(dbName, tableName, bigWhereCondition, columnsUpdated);
                    textAreaOutput.setText(result);
                }
            }
        }
    }//GEN-LAST:event_buttonExecuteCommandActionPerformed

    private void itemStateChangeActionPerformedForDatabase(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangeActionPerformedForDatabase
        String dbName = (String) comboBoxDatabaseNames.getSelectedItem();
        if (!dbName.equals("Choose database...")) {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(getAllTableNamesForDb(dbName)));

            panelColumnsUpdated.removeAll();
            panelColumnsUpdated.setLayout(new GridLayout(0, 2, 10, 10));
            panelColumnsUpdated.revalidate();
            panelColumnsUpdated.repaint();
            scrollPanelColumnsUpdated.setViewportView(panelColumnsUpdated);

            columnNames = null;
            columnNames = new ArrayList<String>();
        } else {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
            comboBoxColumn1.setModel(new DefaultComboBoxModel<>(new String[]{}));
            comboBoxColumn2.setModel(new DefaultComboBoxModel<>(new String[]{}));
            textFieldValue1.setText("");
            textFieldValue2.setText("");

            panelColumnsUpdated.removeAll();
            panelColumnsUpdated.setLayout(new GridLayout(0, 2, 10, 10));
            panelColumnsUpdated.revalidate();
            panelColumnsUpdated.repaint();
            scrollPanelColumnsUpdated.setViewportView(panelColumnsUpdated);

            columnNames = null;
            columnNames = new ArrayList<String>();
        }
    }//GEN-LAST:event_itemStateChangeActionPerformedForDatabase

    private void itemStateChangedActionPerformedForTable(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangedActionPerformedForTable
        String dbName = (String) comboBoxDatabaseNames.getSelectedItem();
        String tableName = (String) comboBoxTableNames.getSelectedItem();

        if (!tableName.equals("Choose table...")) {
            String[] tblSchema = getTableSchemaForDbAndTable(dbName, tableName);
            comboBoxColumn1.setModel(new DefaultComboBoxModel<>(tblSchema));
            comboBoxColumn2.setModel(new DefaultComboBoxModel<>(tblSchema));

            panelColumnsUpdated.setLayout(new GridLayout(0, 2, 10, 10));
            panelColumnsUpdated.revalidate();
            panelColumnsUpdated.repaint();
            boolean founded;
            for (int i = 1; i < tblSchema.length; i++) {
                founded = false;
                //System.out.println("--->" + tblSchema[i]);
                for (String col : columnNames) {
                    //System.out.println("=> " + tblSchema[i] + "-" + col + "|" + col.equals(tblSchema[i]));
                    if (col.equals(tblSchema[i])) {
                        founded = true;
                        break;
                    }
                }
                if (founded == false) {
                    JLabel columnLabel = new JLabel(tblSchema[i]);
                    JTextField columnUpdates = new JTextField();
                    columnLabel.setLabelFor(columnUpdates);
                    panelColumnsUpdated.add(columnLabel);
                    panelColumnsUpdated.add(columnUpdates);
                    columnNames.add(tblSchema[i]);
                }
            }

            panelColumnsUpdated.revalidate();
            panelColumnsUpdated.repaint();
            scrollPanelColumnsUpdated.setViewportView(panelColumnsUpdated);
        } else {
            comboBoxColumn1.setModel(new DefaultComboBoxModel<>(new String[]{}));
            comboBoxColumn2.setModel(new DefaultComboBoxModel<>(new String[]{}));
            textFieldValue1.setText("");
            textFieldValue2.setText("");

            panelColumnsUpdated.removeAll();
            panelColumnsUpdated.setLayout(new GridLayout(0, 2, 10, 10));
            panelColumnsUpdated.revalidate();
            panelColumnsUpdated.repaint();
            scrollPanelColumnsUpdated.setViewportView(panelColumnsUpdated);
        }
    }//GEN-LAST:event_itemStateChangedActionPerformedForTable

    private void customActionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customActionMouseClicked
        columnNames = null;
        columnNames = new ArrayList<String>();
    }//GEN-LAST:event_customActionMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClearData;
    private javax.swing.JButton buttonExecuteCommand;
    private javax.swing.JComboBox<String> comboBoxColumn1;
    private javax.swing.JComboBox<String> comboBoxColumn2;
    private javax.swing.JComboBox<String> comboBoxDatabaseNames;
    private javax.swing.JComboBox<String> comboBoxLogicalOperator;
    private javax.swing.JComboBox<String> comboBoxOperator1;
    private javax.swing.JComboBox<String> comboBoxOperator2;
    private javax.swing.JComboBox<String> comboBoxTableNames;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelColumn;
    private javax.swing.JLabel labelConditionWhere1;
    private javax.swing.JLabel labelConditionWhere2;
    private javax.swing.JLabel labelLogicalOperator;
    private javax.swing.JLabel labelObservation;
    private javax.swing.JLabel labelOperator;
    private javax.swing.JLabel labelSelectDatabaseName;
    private javax.swing.JLabel labelSelectTableName1;
    private javax.swing.JLabel labelValue;
    private javax.swing.JPanel panelColumnsUpdated;
    private javax.swing.JScrollPane scrollPanelColumnsUpdated;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextField textFieldValue1;
    private javax.swing.JTextField textFieldValue2;
    // End of variables declaration//GEN-END:variables

    List<String> columnNames = new ArrayList<String>();

    private String[] getAllDatabaseNames() {
		Database database = new DatabaseImpl();
		List<String> dbNames;
		try {
			dbNames = database.getAllDabaseNames();
			for (int i = 0; i < dbNames.size(); i++) {
				if (dbNames.get(i).equals(".DS_Store")) {
					dbNames.remove(i);
				}
			}
			dbNames.add(0, "Choose database...");
		} catch (Exception e) {
			dbNames = new ArrayList<String>();
			dbNames.add(0, "Choose database...");
		}
		String[] temp = dbNames.toArray(new String[dbNames.size()]);
		return temp;
	}

	public String[] getAllTableNamesForDb(String dbName) {
		Database database = new DatabaseImpl();
		List<String> tableNames = new ArrayList<String>();
		try {
			tableNames = database.getAllTableNamesForDb(dbName);
			for (int i = 0; i < tableNames.size(); i++) {
				if (tableNames.get(i).equals(".DS_Store")) {
					tableNames.remove(i);
				}
			}
			tableNames.add(0, "Choose table...");
		} catch (Exception ex) {
			tableNames = new ArrayList<String>();
			tableNames.add(0, "Choose table...");
		}
		String[] temp = tableNames.toArray(new String[tableNames.size()]);
		return temp;
	}

    private String[] getTableSchemaForDbAndTable(String dbName, String tableName) {
        Table table = new TableImpl();
        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
        List<String> tempCols = new ArrayList<String>();
        for (String column : columnNames) {
            tempCols.add(column.split("=")[0].trim());
        }
        tempCols.add(0, "Choose...");
        String[] temp = tempCols.toArray(new String[tempCols.size()]);
        return temp;
    }

    private String[] getTableSchemaForDbAndTableWithoutChoose(String dbName, String tableName) {
        Table table = new TableImpl();
        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
        List<String> tempCols = new ArrayList<String>();
        for (String column : columnNames) {
            tempCols.add(column.split("=")[0].trim());
        }
        String[] temp = tempCols.toArray(new String[tempCols.size()]);
        return temp;
    }
}
