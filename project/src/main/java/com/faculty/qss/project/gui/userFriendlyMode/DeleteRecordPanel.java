/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.faculty.qss.project.gui.userFriendlyMode;

import com.faculty.qss.project.comands.Implementation.DatabaseImpl;
import com.faculty.qss.project.comands.Implementation.TableImpl;
import com.faculty.qss.project.comands.Interfaces.Database;
import com.faculty.qss.project.comands.Interfaces.Table;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author echilaboc
 */
public class DeleteRecordPanel extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = 8984951942823753204L;

	/**
     * Creates new form DeleteRecordPanel
     */
    public DeleteRecordPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSelectTableName1 = new javax.swing.JLabel();
        comboBoxTableNames = new javax.swing.JComboBox<>();
        labelSelectDatabaseName = new javax.swing.JLabel();
        comboBoxDatabaseNames = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        comboBoxColumn2 = new javax.swing.JComboBox<>();
        comboBoxOperator2 = new javax.swing.JComboBox<>();
        textFieldValue2 = new javax.swing.JTextField();
        labelColumn = new javax.swing.JLabel();
        labelOperator = new javax.swing.JLabel();
        labelConditionWhere1 = new javax.swing.JLabel();
        labelValue = new javax.swing.JLabel();
        comboBoxColumn1 = new javax.swing.JComboBox<>();
        comboBoxOperator1 = new javax.swing.JComboBox<>();
        textFieldValue1 = new javax.swing.JTextField();
        labelConditionWhere2 = new javax.swing.JLabel();
        labelObservation = new javax.swing.JLabel();
        buttonClearData = new javax.swing.JButton();
        buttonExecuteCommand = new javax.swing.JButton();
        comboBoxLogicalOperator = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(469, 369));
        setSize(new java.awt.Dimension(469, 369));

        labelSelectTableName1.setText("<html>Select the table</html>");

        comboBoxTableNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        comboBoxTableNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangedActionPerformedForTable(evt);
            }
        });

        labelSelectDatabaseName.setText("<html>Select the database</html>");

        comboBoxDatabaseNames.setModel(new javax.swing.DefaultComboBoxModel<>(getAllDatabaseNames()));
        comboBoxDatabaseNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangeActionPerformedForDatabase(evt);
            }
        });

        textAreaOutput.setEditable(false);
        textAreaOutput.setColumns(20);
        textAreaOutput.setRows(5);
        jScrollPane2.setViewportView(textAreaOutput);

        comboBoxColumn2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ""}));

        comboBoxOperator2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "!="}));

        labelColumn.setText("Column");

        labelOperator.setText("Operator");

        labelConditionWhere1.setText("Condition 1:");

        labelValue.setText("Value");

        comboBoxColumn1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));

        comboBoxOperator1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "!=" }));

        labelConditionWhere2.setText("Condition 2:");

        labelObservation.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        labelObservation.setText("* For no conditions leave free");

        buttonClearData.setForeground(new java.awt.Color(153, 153, 0));
        buttonClearData.setText("Clear");
        buttonClearData.setMaximumSize(new java.awt.Dimension(68, 27));
        buttonClearData.setMinimumSize(new java.awt.Dimension(68, 27));
        buttonClearData.setPreferredSize(new java.awt.Dimension(68, 27));
        buttonClearData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearDataActionPerformed(evt);
            }
        });

        buttonExecuteCommand.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        buttonExecuteCommand.setForeground(new java.awt.Color(0, 102, 0));
        buttonExecuteCommand.setText("Execute");
        buttonExecuteCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecuteCommandActionPerformed(evt);
            }
        });

        comboBoxLogicalOperator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "and", "or" }));

        jLabel1.setText("Logical operator:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(labelColumn)
                                .addGap(100, 100, 100)
                                .addComponent(labelOperator))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelConditionWhere1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboBoxColumn1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxOperator1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxOperator2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxLogicalOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldValue2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldValue1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelObservation)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelConditionWhere2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxColumn2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelSelectTableName1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(comboBoxTableNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(comboBoxDatabaseNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(labelValue)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(buttonClearData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonExecuteCommand)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDatabaseNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSelectTableName1)
                    .addComponent(comboBoxTableNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelColumn)
                    .addComponent(labelOperator)
                    .addComponent(labelValue))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelConditionWhere1)
                    .addComponent(comboBoxColumn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxOperator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldValue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxLogicalOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelConditionWhere2)
                    .addComponent(comboBoxColumn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxOperator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldValue2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelObservation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonExecuteCommand)
                    .addComponent(buttonClearData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClearDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearDataActionPerformed
        comboBoxDatabaseNames.setSelectedIndex(0);
        comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
        comboBoxColumn1.setModel(new DefaultComboBoxModel<>(new String[]{}));
        comboBoxColumn2.setModel(new DefaultComboBoxModel<>(new String[]{}));
        textFieldValue1.setText("");
        textFieldValue2.setText("");
        textAreaOutput.setText("");
    }//GEN-LAST:event_buttonClearDataActionPerformed

    private void buttonExecuteCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecuteCommandActionPerformed
        String dbName = comboBoxDatabaseNames.getSelectedItem().toString().trim();
        
        assert (!dbName.contains("Choose database...")): "You have to select a database name from list";
        
        String tableName;
        try {
            tableName = comboBoxTableNames.getSelectedItem().toString().trim();
        } catch (Exception e) {
            tableName = "";
        }
        
        assert (!tableName.contains("Choose table...")): "You have to select a table name from list";

        if (dbName.contains("Choose database...")) {
            textAreaOutput.setText("You have to select a database name from list");
        } else if (tableName.contains("Choose table...")) {
            textAreaOutput.setText("You have to select a table name from list");
        } else {
            String conditionColumn1 = (String) comboBoxColumn1.getSelectedItem();
            String conditionColumn2 = (String) comboBoxColumn2.getSelectedItem();
            String conditionValue1 = textFieldValue1.getText().trim();
            String conditionValue2 = textFieldValue2.getText().trim();

            String whereCondition1 = "";
            String whereCondition2 = "";
            String bigWhereCondition = "";
            
            boolean isCondition1Selected = false;
            boolean isCondition2Selected = false;
            if (conditionColumn1.equals("Choose..") && conditionValue1.length() == 0 && conditionColumn2.equals("Choose..") && conditionValue2.length() == 0) {
            } else {
                if (!((conditionColumn1.equals("Choose..") && conditionValue1.length() != 0) || (!conditionColumn1.equals("Choose..") && conditionValue1.length() == 0))) {
                    isCondition1Selected = true;
                    whereCondition1 += conditionColumn1 + comboBoxOperator1.getSelectedItem() + conditionValue1;
                } else {
                    textAreaOutput.setText("Both value and column name from first conditions has to be completed");
                }
                if (!((conditionColumn2.equals("Choose..") && conditionValue2.length() != 0) || (!conditionColumn2.equals("Choose..") && conditionValue2.length() == 0))) {
                    isCondition2Selected = true;
                    whereCondition2 += conditionColumn2 + comboBoxOperator2.getSelectedItem() + conditionValue2;
                } else {
                    textAreaOutput.append("\nBoth value and column name from second conditions has to be completed");
                }
                
                if(isCondition1Selected && isCondition2Selected && !whereCondition1.contains("Choose..") && !whereCondition2.contains("Choose..")){
                    bigWhereCondition = whereCondition1 + " " + comboBoxLogicalOperator + " " + whereCondition2;
                }else if(isCondition1Selected && !whereCondition1.contains("Choose..")){
                    bigWhereCondition = whereCondition1;
                }else if(isCondition2Selected && !whereCondition2.contains("Choose..")){
                    bigWhereCondition = whereCondition2;
                }
                table = getTable();
                String result = table.deleteRecords(dbName, tableName, bigWhereCondition);
                textAreaOutput.setText(result);
                table = null;
            }
        }
    }//GEN-LAST:event_buttonExecuteCommandActionPerformed

    private void itemStateChangedActionPerformedForTable(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangedActionPerformedForTable
        String dbName = (String) comboBoxDatabaseNames.getSelectedItem();
        String tableName = (String) comboBoxTableNames.getSelectedItem();

        if (!tableName.equals("Choose table...")) {
            comboBoxColumn1.setModel(new DefaultComboBoxModel<>(getTableSchemaForDbAndTable(dbName, tableName)));
            comboBoxColumn2.setModel(new DefaultComboBoxModel<>(getTableSchemaForDbAndTable(dbName, tableName)));
        } else {
            comboBoxColumn1.setModel(new DefaultComboBoxModel<>(new String[]{}));
            comboBoxColumn2.setModel(new DefaultComboBoxModel<>(new String[]{}));
            textFieldValue1.setText("");
            textFieldValue2.setText("");
        }
    }//GEN-LAST:event_itemStateChangedActionPerformedForTable

    private void itemStateChangeActionPerformedForDatabase(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangeActionPerformedForDatabase
        String dbName = (String) comboBoxDatabaseNames.getSelectedItem();
        if (!dbName.equals("Choose database...")) {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(getAllTableNamesForDb(dbName)));
        } else {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
            comboBoxColumn1.setModel(new DefaultComboBoxModel<>(new String[]{}));
            comboBoxColumn2.setModel(new DefaultComboBoxModel<>(new String[]{}));
            textFieldValue1.setText("");
            textFieldValue2.setText("");
        }
    }//GEN-LAST:event_itemStateChangeActionPerformedForDatabase


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClearData;
    private javax.swing.JButton buttonExecuteCommand;
    private javax.swing.JComboBox<String> comboBoxColumn1;
    private javax.swing.JComboBox<String> comboBoxColumn2;
    private javax.swing.JComboBox<String> comboBoxDatabaseNames;
    private javax.swing.JComboBox<String> comboBoxLogicalOperator;
    private javax.swing.JComboBox<String> comboBoxOperator1;
    private javax.swing.JComboBox<String> comboBoxOperator2;
    private javax.swing.JComboBox<String> comboBoxTableNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelColumn;
    private javax.swing.JLabel labelConditionWhere1;
    private javax.swing.JLabel labelConditionWhere2;
    private javax.swing.JLabel labelObservation;
    private javax.swing.JLabel labelOperator;
    private javax.swing.JLabel labelSelectDatabaseName;
    private javax.swing.JLabel labelSelectTableName1;
    private javax.swing.JLabel labelValue;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextField textFieldValue1;
    private javax.swing.JTextField textFieldValue2;
    
    private Table table;
    // End of variables declaration//GEN-END:variables

    private String[] getAllDatabaseNames() {
		Database database = new DatabaseImpl();
		List<String> dbNames;
		try {
			dbNames = database.getAllDabaseNames();
			for (int i = 0; i < dbNames.size(); i++) {
				if (dbNames.get(i).equals(".DS_Store")) {
					dbNames.remove(i);
				}
			}
			dbNames.add(0, "Choose database...");
		} catch (Exception e) {
			dbNames = new ArrayList<String>();
			dbNames.add(0, "Choose database...");
		}
		String[] temp = dbNames.toArray(new String[dbNames.size()]);
		return temp;
	}

	public String[] getAllTableNamesForDb(String dbName) {
		Database database = new DatabaseImpl();
		List<String> tableNames = new ArrayList<String>();
		try {
			tableNames = database.getAllTableNamesForDb(dbName);
			for (int i = 0; i < tableNames.size(); i++) {
				if (tableNames.get(i).equals(".DS_Store")) {
					tableNames.remove(i);
				}
			}
			tableNames.add(0, "Choose table...");
		} catch (Exception ex) {
			tableNames = new ArrayList<String>();
			tableNames.add(0, "Choose table...");
		}
		String[] temp = tableNames.toArray(new String[tableNames.size()]);
		return temp;
	}

    private String[] getTableSchemaForDbAndTable(String dbName, String tableName) {
        Table table = new TableImpl();
        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
        List<String> tempCols = new ArrayList<String>();
        for (String column : columnNames) {
            tempCols.add(column.split("=")[0].trim());

        }
        tempCols.add(0, "Choose..");
        String[] temp = tempCols.toArray(new String[tempCols.size()]);
        return temp;
    }
    
    public Table getTable() {
		if (table == null) {
			return new TableImpl();
		} else {
			return table;
		}
	}

	public void setTable(Table tbl) {
		table = tbl;
	}

	public javax.swing.JButton getButtonClearData() {
		return buttonClearData;
	}

	public javax.swing.JButton getButtonExecuteCommand() {
		return buttonExecuteCommand;
	}

	public javax.swing.JComboBox<String> getComboBoxColumn1() {
		return comboBoxColumn1;
	}

	public javax.swing.JComboBox<String> getComboBoxColumn2() {
		return comboBoxColumn2;
	}

	public javax.swing.JComboBox<String> getComboBoxDatabaseNames() {
		return comboBoxDatabaseNames;
	}

	public javax.swing.JComboBox<String> getComboBoxLogicalOperator() {
		return comboBoxLogicalOperator;
	}

	public javax.swing.JComboBox<String> getComboBoxOperator1() {
		return comboBoxOperator1;
	}

	public javax.swing.JComboBox<String> getComboBoxOperator2() {
		return comboBoxOperator2;
	}

	public javax.swing.JComboBox<String> getComboBoxTableNames() {
		return comboBoxTableNames;
	}

	public javax.swing.JTextArea getTextAreaOutput() {
		return textAreaOutput;
	}

	public javax.swing.JTextField getTextFieldValue1() {
		return textFieldValue1;
	}

	public javax.swing.JTextField getTextFieldValue2() {
		return textFieldValue2;
	}
}
