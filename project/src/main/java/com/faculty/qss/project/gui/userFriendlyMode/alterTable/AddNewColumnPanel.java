/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.faculty.qss.project.gui.userFriendlyMode.alterTable;

import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextField;

import com.faculty.qss.project.comands.Implementation.DatabaseImpl;
import com.faculty.qss.project.comands.Implementation.TableImpl;
import com.faculty.qss.project.comands.Interfaces.Database;
import com.faculty.qss.project.comands.Interfaces.Table;

/**
 *
 * @author ecami
 */
public class AddNewColumnPanel extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = -9114898306313668783L;

	/**
     * Creates new form AddNewColumnPanel
     */
    public AddNewColumnPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSelectDatabaseName = new javax.swing.JLabel();
        labelSelectTableName1 = new javax.swing.JLabel();
        comboBoxDatabaseNames = new javax.swing.JComboBox<>();
        comboBoxTableNames = new javax.swing.JComboBox<>();
        labelEnterColumnNamesAndTypes = new javax.swing.JLabel();
        scrollPaneColumns = new javax.swing.JScrollPane();
        panelColumns = new javax.swing.JPanel();
        textFieldColumnName = new javax.swing.JTextField();
        comboBoxColumnType = new javax.swing.JComboBox<>();
        textFieldColumnName1 = new javax.swing.JTextField();
        comboBoxColumnType1 = new javax.swing.JComboBox<>();
        textFieldColumnName2 = new javax.swing.JTextField();
        comboBoxColumnType2 = new javax.swing.JComboBox<>();
        textFieldColumnName3 = new javax.swing.JTextField();
        comboBoxColumnType3 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        buttonClearData = new javax.swing.JButton();
        buttonExecuteCommand = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(462, 293));
        setSize(new java.awt.Dimension(462, 293));

        labelSelectDatabaseName.setText("<html>Select the database</html>");

        labelSelectTableName1.setText("<html>Select the table</html>");

        comboBoxDatabaseNames.setModel(new javax.swing.DefaultComboBoxModel<>(getAllDatabaseNames()));
        comboBoxDatabaseNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangeActionPerformedForDatabase(evt);
            }
        });

        comboBoxTableNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ""}));
        comboBoxTableNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemStateChangedActionPerformedForTable(evt);
            }
        });

        labelEnterColumnNamesAndTypes.setText("<html>Enter column names <br>and types</html>");

        scrollPaneColumns.setHorizontalScrollBar(null);

        comboBoxColumnType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "String", "Integer", "Long", "Double" }));

        comboBoxColumnType1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "String", "Integer", "Long", "Double" }));

        comboBoxColumnType2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboBoxColumnType3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panelColumnsLayout = new javax.swing.GroupLayout(panelColumns);
        panelColumns.setLayout(panelColumnsLayout);
        panelColumnsLayout.setHorizontalGroup(
            panelColumnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColumnsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelColumnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelColumnsLayout.createSequentialGroup()
                        .addComponent(textFieldColumnName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxColumnType, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelColumnsLayout.createSequentialGroup()
                        .addComponent(textFieldColumnName1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxColumnType1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelColumnsLayout.createSequentialGroup()
                        .addComponent(textFieldColumnName2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxColumnType2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelColumnsLayout.createSequentialGroup()
                        .addComponent(textFieldColumnName3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxColumnType3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelColumnsLayout.setVerticalGroup(
            panelColumnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColumnsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelColumnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldColumnName)
                    .addComponent(comboBoxColumnType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelColumnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldColumnName1)
                    .addComponent(comboBoxColumnType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelColumnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldColumnName2)
                    .addComponent(comboBoxColumnType2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelColumnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldColumnName3)
                    .addComponent(comboBoxColumnType3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(81, 81, 81))
        );

        scrollPaneColumns.setViewportView(panelColumns);

        textAreaOutput.setColumns(20);
        textAreaOutput.setRows(5);
        jScrollPane1.setViewportView(textAreaOutput);

        buttonClearData.setForeground(new java.awt.Color(153, 153, 0));
        buttonClearData.setText("Clear");
        buttonClearData.setMaximumSize(new java.awt.Dimension(68, 27));
        buttonClearData.setMinimumSize(new java.awt.Dimension(68, 27));
        buttonClearData.setPreferredSize(new java.awt.Dimension(68, 27));
        buttonClearData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearDataActionPerformed(evt);
            }
        });

        buttonExecuteCommand.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        buttonExecuteCommand.setForeground(new java.awt.Color(0, 102, 0));
        buttonExecuteCommand.setText("Execute");
        buttonExecuteCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecuteCommandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonClearData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonExecuteCommand))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelEnterColumnNamesAndTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(scrollPaneColumns, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelSelectTableName1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(31, 31, 31)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(comboBoxDatabaseNames, 0, 150, Short.MAX_VALUE)
                                .addComponent(comboBoxTableNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSelectDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDatabaseNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSelectTableName1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxTableNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEnterColumnNamesAndTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(scrollPaneColumns, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonExecuteCommand)
                    .addComponent(buttonClearData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClearDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearDataActionPerformed
        comboBoxDatabaseNames.setSelectedIndex(0);
        comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
        textAreaOutput.setText("");
        
        textFieldColumnName.setText("");
        textFieldColumnName1.setText("");
        textFieldColumnName2.setText("");
        textFieldColumnName3.setText("");
        
        comboBoxColumnType.setSelectedIndex(0);
        comboBoxColumnType1.setSelectedIndex(0);
        comboBoxColumnType2.setSelectedIndex(0);
        comboBoxColumnType3.setSelectedIndex(0);
    }//GEN-LAST:event_buttonClearDataActionPerformed

    private void buttonExecuteCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecuteCommandActionPerformed
        String dbName = comboBoxDatabaseNames.getSelectedItem().toString().trim();
        
        assert (!dbName.contains("Choose database...")): "You have to select a database name from list";
        
        if(dbName.equals("Choose database...")){
            textAreaOutput.setText("Choose a database from list");
        }else{
            String tableName = comboBoxTableNames.getSelectedItem().toString().trim();
            
            assert (!tableName.contains("Choose table...")): "You have to select a table name from list";
            
            if (tableName.equals("Choose table...")){
                textAreaOutput.setText("Choose a table from list");
            }else{
                List<JTextField> columnTextFields = new ArrayList<JTextField>();
                List<JComboBox> columnsComboBoxes = new ArrayList<JComboBox>();

                Component[] panelColumnComponents = panelColumns.getComponents();
                for (int i = 0; i < panelColumnComponents.length; i++) {
                    if (panelColumnComponents[i] instanceof JTextField) {
                        columnTextFields.add((JTextField) panelColumnComponents[i]);
                    } else if (panelColumnComponents[i] instanceof JComboBox) {
                        columnsComboBoxes.add((JComboBox) panelColumnComponents[i]);
                    }
                }
                HashMap<String, String> columnsNamesAndTypes = new HashMap<String, String>();
                int completedColumnsNumber = 0;
                for (int i = 0; i < columnTextFields.size(); i++) {
                    String columnName = columnTextFields.get(i).getText().trim();
                    String columnType = ((String) columnsComboBoxes.get(i).getSelectedItem()).trim();
                    if (columnName.length() != 0) {
                        completedColumnsNumber++;
                        columnsNamesAndTypes.put(columnName, columnType);
                    }
                }

                if (completedColumnsNumber == 0) {
                    textAreaOutput.setText("You need to have at least a column to add");
                } else {
                    Table table = getTable();
                    String result = table.addNewColumns(dbName, tableName, columnsNamesAndTypes);
                    textAreaOutput.setText(result);
                    table = null;
                }
                }
            }
    }//GEN-LAST:event_buttonExecuteCommandActionPerformed

    private void itemStateChangeActionPerformedForDatabase(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangeActionPerformedForDatabase
        String dbName = (String) comboBoxDatabaseNames.getSelectedItem();
        if (!dbName.equals("Choose database...")) {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(getAllTableNamesForDb(dbName)));
        } else {
            comboBoxTableNames.setModel(new DefaultComboBoxModel<>(new String[]{}));
        }
        textFieldColumnName.setText("");
        textFieldColumnName1.setText("");
        textFieldColumnName2.setText("");
        textFieldColumnName3.setText("");
        comboBoxColumnType.setSelectedIndex(0);
        comboBoxColumnType1.setSelectedIndex(0);
        comboBoxColumnType2.setSelectedIndex(0);
        comboBoxColumnType3.setSelectedIndex(0);
    }//GEN-LAST:event_itemStateChangeActionPerformedForDatabase

    private void itemStateChangedActionPerformedForTable(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemStateChangedActionPerformedForTable
        textFieldColumnName.setText("");
        textFieldColumnName1.setText("");
        textFieldColumnName2.setText("");
        textFieldColumnName3.setText("");
        comboBoxColumnType.setSelectedIndex(0);
        comboBoxColumnType1.setSelectedIndex(0);
        comboBoxColumnType2.setSelectedIndex(0);
        comboBoxColumnType3.setSelectedIndex(0);
    }//GEN-LAST:event_itemStateChangedActionPerformedForTable


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClearData;
    private javax.swing.JButton buttonExecuteCommand;
    private javax.swing.JComboBox<String> comboBoxColumnType;
    private javax.swing.JComboBox<String> comboBoxColumnType1;
    private javax.swing.JComboBox<String> comboBoxColumnType2;
    private javax.swing.JComboBox<String> comboBoxColumnType3;
    private javax.swing.JComboBox<String> comboBoxDatabaseNames;
    private javax.swing.JComboBox<String> comboBoxTableNames;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelEnterColumnNamesAndTypes;
    private javax.swing.JLabel labelSelectDatabaseName;
    private javax.swing.JLabel labelSelectTableName1;
    private javax.swing.JPanel panelColumns;
    private javax.swing.JScrollPane scrollPaneColumns;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextField textFieldColumnName;
    private javax.swing.JTextField textFieldColumnName1;
    private javax.swing.JTextField textFieldColumnName2;
    private javax.swing.JTextField textFieldColumnName3;
    
    private Table table;
    // End of variables declaration//GEN-END:variables

    private String[] getAllDatabaseNames() {
		Database database = new DatabaseImpl();
		List<String> dbNames;
		try {
			dbNames = database.getAllDabaseNames();
			for (int i = 0; i < dbNames.size(); i++) {
				if (dbNames.get(i).equals(".DS_Store")) {
					dbNames.remove(i);
				}
			}
			dbNames.add(0, "Choose database...");
		} catch (Exception e) {
			dbNames = new ArrayList<String>();
			dbNames.add(0, "Choose database...");
		}
		String[] temp = dbNames.toArray(new String[dbNames.size()]);
		return temp;
	}

	public String[] getAllTableNamesForDb(String dbName) {
		Database database = new DatabaseImpl();
		List<String> tableNames = new ArrayList<String>();
		try {
			tableNames = database.getAllTableNamesForDb(dbName);
			for (int i = 0; i < tableNames.size(); i++) {
				if (tableNames.get(i).equals(".DS_Store")) {
					tableNames.remove(i);
				}
			}
			tableNames.add(0, "Choose table...");
		} catch (Exception ex) {
			tableNames = new ArrayList<String>();
			tableNames.add(0, "Choose table...");
		}
		String[] temp = tableNames.toArray(new String[tableNames.size()]);
		return temp;
	}

//    private String[] getTableSchemaForDbAndTable(String dbName, String tableName) {
//        Table table = new TableImpl();
//        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
//        List<String> tempCols = new ArrayList<String>();
//        for (String column : columnNames) {
//            tempCols.add(column.split("=")[0].trim());
//        }
//        tempCols.add(0, "Choose...");
//        String[] temp = tempCols.toArray(new String[tempCols.size()]);
//        return temp;
//    }
//
//    private String[] getTableSchemaForDbAndTableWithoutChoose(String dbName, String tableName) {
//        Table table = new TableImpl();
//        List<String> columnNames = table.getTableSchemaForDbAndTable(dbName, tableName);
//        List<String> tempCols = new ArrayList<String>();
//        for (String column : columnNames) {
//            tempCols.add(column.split("=")[0].trim());
//        }
//        String[] temp = tempCols.toArray(new String[tempCols.size()]);
//        return temp;
//    }
	
	public Table getTable() {
		if (table == null) {
			return new TableImpl();
		} else {
			return table;
		}
	}

	public void setTable(Table tbl) {
		table = tbl;
	}

	public javax.swing.JButton getButtonClearData() {
		return buttonClearData;
	}

	public javax.swing.JButton getButtonExecuteCommand() {
		return buttonExecuteCommand;
	}

	public javax.swing.JComboBox<String> getComboBoxColumnType() {
		return comboBoxColumnType;
	}

	public javax.swing.JComboBox<String> getComboBoxColumnType1() {
		return comboBoxColumnType1;
	}

	public javax.swing.JComboBox<String> getComboBoxColumnType2() {
		return comboBoxColumnType2;
	}

	public javax.swing.JComboBox<String> getComboBoxColumnType3() {
		return comboBoxColumnType3;
	}

	public javax.swing.JComboBox<String> getComboBoxDatabaseNames() {
		return comboBoxDatabaseNames;
	}

	public javax.swing.JComboBox<String> getComboBoxTableNames() {
		return comboBoxTableNames;
	}

	public javax.swing.JTextArea getTextAreaOutput() {
		return textAreaOutput;
	}

	public javax.swing.JTextField getTextFieldColumnName() {
		return textFieldColumnName;
	}

	public javax.swing.JTextField getTextFieldColumnName1() {
		return textFieldColumnName1;
	}

	public javax.swing.JTextField getTextFieldColumnName2() {
		return textFieldColumnName2;
	}

	public javax.swing.JTextField getTextFieldColumnName3() {
		return textFieldColumnName3;
	}

	public javax.swing.JPanel getPanelColumns() {
		return panelColumns;
	}
}
